package Parse;

action code {: static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    :};

parser code  {:
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }
:};

scan with {: return lexer.nextToken(); :};

terminal String ID, STRING;
terminal Integer INT;
terminal COMMA, COLON, SEMICOLON, LPAREN, RPAREN, LBRACK, RBRACK,
	LBRACE, RBRACE, DOT, PLUS, MINUS, TIMES, DIVIDE, EQ, NEQ, LT, LE,
	GT, GE, AND, OR, ASSIGN, ARRAY, IF, THEN, ELSE, WHILE, FOR, TO,
	DO, LET, IN, END, OF, BREAK, NIL, FUNCTION, VAR, TYPE;

non terminal Absyn.Exp          Exp;
non terminal Absyn.Var          Var;
non terminal Absyn.SubscriptVar SubscriptVar;
non terminal Absyn.FieldVar     FieldVar;

start with Exp;
//Uh I think Var is "lValue" as referred to in the book...

Exp ::= error:e
	  {: RESULT = new Absyn.SeqExp(eleft, null); :}
	| Var:v
	  {: RESULT = new Absyn.VarExp(vleft, v); :}
	| STRING:s
		{: RESULT = new Absyn.StringExp(sleft, s); :}
	| INT:i
	  {: RESULT = new Absyn.IntExp(ileft, i); :}
	| BREAK:b
	  {: RESULT = new Absyn.BreakExp(bleft); :}
	;

Var ::=   ID:n
	  {: RESULT = new Absyn.SimpleVar(nleft, sym(n)); :}
	| SubscriptVar:sv
	  {: RESULT = sv; :}
	| FieldVar:fv
		{: RESULT = fv; :}
	;

SubscriptVar ::= Var:v LBRACK Exp:e RBRACK
    {: RESULT = new Absyn.SubscriptVar(vleft, v, e); :}
	;

FieldVar ::= Var:v DOT ID:id
		{: RESULT = new Absyn.FieldVar(vleft, v, sym(id)); :}
	;
